Описание работы карты при следующих действиях:
Для начала попробую представить ситуацию,в которой  мможно было бы использовать такю реализацию User.


Для начала,необходимо определиться, какие именно поля необходимо включить в сравнение объектов.

Поле - String name: обязательное поле,включаемое для сравнения:в большинстве,каждый объект User имеет свое
уникальное имя,следовательно при сравненинии двух объектов User, начинаем сравнение именно с него.

Поле - int children: необязательное поле.Количественный параметр вообще не имеет смысловой нагрузки,а лишь указывает
на некоторую особенность User, возможно для дальнейшей сортировки,например в базе данных о льготных исчислениях,
для дальнейшего распределения некоторых материальных благ для отдельных слоев населения.В данном случае,этот параметр
может повторяться у многих объектов,при этом соответствовать правильному определению этих объектов.

Поле - Calendar birthday: для того,что бы более точно указать на объект,можно добавить это поле,так как,вероятность
того,что в базе данных встретится такой же элемент(но имеющий другую смысловую нагрузку) станет гораздо меньше.

1.Переопредилим hashCode():
Idea предлагает следующий вариант:

 @Override
    public int hashCode() {
        int result = name != null ? name.hashCode() : 0;
        result = 31 * result + (birthday != null ? birthday.hashCode() : 0);
        return result;
    }
    Пояснение:
    Хэш-код - некоторое числовое значение с ограниченным диапазоном,поэтому создается переменная result.
    Далее, посредством тернарного оператора, определяется и присваивается значение result:
    если поле не NULL - получаем хэш-код поля, в противном случае - 0.
    Далее,result умножается на 31("Замечательное свойство числа 31 заключается в том, что умножение может быть заменено
    сдвигом и вычитанием для лучшей производительности: 31 * i == (i << 5) - i"( Джон Блох:"Effective java"ст.9,стр.83))
    и складывается с хэшкодом второго поля(определенному по тому же принципу,что и хэш-код первого поля)

При переопределении этого метода, сравнение двух одинаковых элементов возвращает false. Причем,hashCode обоих
объектов(при значениях name и birthday отличных от null) одинаково.
выполняется условие:
Если метод equals(Object) показывает, что два объекта равны друг другу, то, вызвав для каждого из них метод
hashCode, вы должны получить в обоих случаях одно и то же целое число
Вывод:
переопределение метода hashCode(),даже при одинаковых возвращаемых значениях этого параметра не достаточно, для
того чтобы определить их как равные.

2.Переопределим метод equals():
При переопределении метода,сравнение двух оюъектов с равными значениями  вернет true.Причем независимо от того,
был ли у нас переопределен метод hashCode().
Вывод:
не переопределив метод equals() при сравнении двух одинаковых,для пользователя, объектов
мы получим false.Объяснить это можно тем,что сравнение будет происходить,используюя стандартный метод.

3.Коллизии:
Допустим у нас имеется некоторый два объекта Obj1 и Obj2;
у них есть поля типа int a  и  b,причем у обоих a=1,b = 2
причем hashCode мы определяем как
public int hashCode(){
return a+b;
}
JVM понимает эти объекты как два разных объекта,и по умолчанию, выделит на них два разных хеш-кода.
Однако при переопределении мы указываем ей,что такого рода объекты нам важно понимать как одинаковые.

если в одном из объектов мы поменяем значения a и b местами, получим,по сути, уже два разных объекта,однако
JVM их будет видеть также как одинаковые,так как на выходе мы получим ту же сумму.
Это и есть коллизия.


