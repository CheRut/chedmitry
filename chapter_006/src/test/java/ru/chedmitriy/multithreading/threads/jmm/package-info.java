/***
 * 1.ВИЗУАЛИЗАЦИЯ.
 *
 * В данном пакете рассмотрены проблемы многопоточности.
 * Первая проблема заключается в в идимости пременной:
 * Допустим у нас имеется некотоый процесс,и нам необходимо
 * обработать этот процесс параллельно(несколькими потоками)
 * В этом случае наш процессор будет обрабатывать данные
 * параллельно.Процессор имеет несколько ядер,тогда
 * каждое ядро будет иметь свое условие обработки процесса.
 * На первый взгляд,так как обрабатываемый процесс будет иметь
 * общие для всех потоков условие(параметры и методы),
 * не должно возникнуть никаких проблем при его выполнении,однако,
 * существует также временная память,в которую будет заносится
 * результат выполнения процессов каждым потоком.
 * Эта память ни как не связана с памятью остальных потоков,
 * следовательно процесс в каждом потоке будет произодится
 * по-своему,что в итоге,на выходе даст совершенно неожиданный результат.
 * То есть: если у нас есть параметр value, который
 * инкрементируется при вызове метода incrementValue()
 * в одном потоке (а у нас потоков несколько),то остальные
 * потоке не будут знать состояние этой переменной,потому
 * что каждый будет,например,вызывать ее начальное значение
 * или случайное инкрементированное ранее.
 * Для решения такой проблемы используется volatile,
 * дающее возможность нескольким потокам изменить
 * значение параметра,использующего это улючевое слово.
 *
 * 2.ГОНКА ЗНАЧЕНИЙ
 *
 * Ключевого слово volatile может быть недостаточно.
 * Решив проблему кэширования
 * остается еще одна проблема - атомарность операций.
 * Суть проблемы заключается в том,что операция инкрементирования
 * выполняется не мгновенно, и в то время,когда один поток
 * работает над икременированием значения,заходит другой поток,и
 * видит еще неизменившееся значение,при этом также начинает инкрементировать.
 * За счет ключевого слова volatile,
 * оба потока будут работать над одним параметром,однако,результаты их
 * работы будут перекрывать друг друга,не всегда давая
 * одному полноценно выполниться.
 * Решить проблему можно с помощью ключевого слова synchronize,
 * которое используется при объявлении метода.
 * Принцип его работы заключается в том,что данный метод теперь
 * может исполняться толькоодним потоком,заставляя остальные потоки ожидать.
 *
 *
 *
 * */
package ru.chedmitriy.multithreading.threads.jmm;
